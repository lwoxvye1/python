import sys
from PIL import Image
"""
模块概述：
随着代码量越来越多，代码就越来越难以维护，为了解决难以维护的问题，我们把很多相似功能的函数
分组，分别放到不同的文件中取。这样每个文件所包含的内容相对较少，而且对于每一个文件的大致功
能可用文件名来体现。很多编程语言都是这么来组织代码结构的。一个.py文件就是一个模块。

优点：
1.为了提高代码的可维护性
2.提高了代码的复用度，当一个模块完毕，可以被多个地方引用
3.引用其他的模块（内置模块和三方模块和自定义模块）
4.避免函数名和变量名的冲突
"""

# 使用标准库中的模块
# 引入模块(import)

print(sys.argv)     # 获取命令行参数的列表  需打开cmd进入python输入
for i in sys.argv:
    print(i)
path = sys.argv[0]
# name = sys.argv[1]
# age = sys.argv[2]
print(path)
print(sys.path)  # 自动查找所需模块的路径的列表


# 使用自定义模块(import语句)
# 一个.py文件就是一个模块     (详情见百度网盘python-10-02)


# 使用自定义模块(from.....import语句)
# 作用：从模块中导入一个指定的部分到当前命名空间
# 格式： from module import name1[, name2]
# 程序内部的函数可以将模块中的同名函数覆盖


# 使用自定义模块(from.....import * 语句)
# 作用： 把一个模块中所有的内容全部导入当前命名空间
# 程序内部的函数可以将模块中的同名函数覆盖
# 最好不要过多的使用


# __name__属性
"""
__name__属性：
模块就是一个可执行的.py文件，一个模块被另一个程序引入，我们不想让模块中的某些代码执行，
可以用__name__属性来使程序仅调用模块中的一部分

每一个模块都有一个__name__属性，当其值等于"__main__"时，表明该模块自身在执行。否则被引入其他文件

当前文件如果为程序的入口文件，则__name__属性的值为__main__
"""
if __name__ == "__main__":
    print("Tom is a good man")


# 包
"""
思考：如果不同的人编写的模块同名了怎么办？

解决：为了解决模块命名的冲突，引入了按目录来组织模块的方法，称为包

特点：引入了包以后，只要顶层的包不予其他人发生冲突，那么模块都不会与别人的发生冲突

注意：目录只有包含一个叫做"__init__.py"的文件才被认作是一个包，主要是为了避免一些滥竽充数的名字，
基本上目前这个文件中什么也不用写
"""


# 安装第三方模块
"""
Mac: 无需安装
Linux:无需安装
windows:勾选了pip和Add python.exe to Path
"""
# 要安装第三方库，需要知道模块的名字
# Pillow  非常强大的处理图像的工具库
# 打开cmd输入pip  install  Pillow
# Windows如果报错，则输入pip install  --upgrade  pip

# 打开图片
im = Image.open("9.1.jpg")
# 查看图片的信息
print(im.format, im.size, im.mode)
# 设置图片的大小
im.thumbnail((150, 100))
# 保存成新图片
im.save("9.2.jpg", "JPEG")
